{"version":3,"sources":["Demo/Faculty/CourseMaterial/AddCourseMaterial.js"],"names":["AddCourseMaterial","props","componentDidMount","a","user","id","match","params","setState","class_id","createNotification","type","value","NotificationManager","info","success","warning","error","onDropPhoto","files","isValid","text","state","isLoading","deletedRowId","showModal","handleCloseModal","name","data","filesProgress","event","this","e","preventDefault","trim","length","that","config","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","FormData","append","axios","post","configs","prod","then","response","history","push","catch","err","console","log","status","msg","filePreview","map","file","i","key","style","fontSize","class","Header","Title","as","Body","className","onSubmit","handleSubmit","disabled","Row","md","span","offset","Group","controlId","Label","Control","placeholder","onFocus","onChange","handleTextChange","target","onDrop","minSize","maxSize","multiple","getRootProps","getInputProps","isDragActive","isDragReject","rejectedFiles","isFileTooLarge","size","display","alignItems","justifyContent","borderWidth","height","borderRadius","textAlign","borderColor","borderStyle","backgroundColor","color","onClick","stopPropagation","width","position","padding","Text","marginTop","variant","React","Component","connect","userDetails"],"mappings":"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","file":"static/js/56.0b06851f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, Button } from 'react-bootstrap';\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport axios from 'axios';\r\nimport configs from '../../../config';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Loader from '../../../App/layout/Loader';\r\nimport { connect } from 'react-redux';\r\nimport Dropzone from 'react-dropzone';\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nclass AddCourseMaterial extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onDropPhoto = (files) => {\r\n            this.setState({ files: files, isValid: { value: true, text: '' } });\r\n        };\r\n        this.state = {\r\n            isLoading: false,\r\n\t\t\tdeletedRowId: null,\r\n\t\t\tshowModal: false,\r\n\t\t\thandleCloseModal: false,\r\n            name: \"\",\r\n            class_id: \"\",\r\n            isValid: {\r\n                value: false,\r\n                text: ''   \r\n            },\r\n            data: [],\r\n            files: [],\r\n            filesProgress: 0,\r\n        }\r\n    }\r\n\r\n    handleTextChange(event) {\r\n        this.setState({ [event.name]: event.value });\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n       if (this.props && this.props.user && this.props.user.id && this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            await this.setState({ class_id: this.props.match.params.id })\r\n        }\r\n    }\r\n    \r\n\r\n    createNotification = (type, value) => {\r\n        switch (type) {\r\n            case 'info':\r\n                NotificationManager.info(value,'', 5000);\r\n                break;\r\n            case 'success':\r\n                NotificationManager.success(value, '', 5000);\r\n                break;\r\n            case 'warning':\r\n                NotificationManager.warning(value, '', 5000);\r\n                break;\r\n            case 'error':\r\n                NotificationManager.error(value, '', 5000);\r\n                break;\r\n            default: break;\r\n        }\r\n    };\r\n  \r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n        const { name, files, class_id  } = this.state;\r\n\r\n        if (!name && name.trim().length <= 0) {\r\n            this.setState({ isValid: { value: true, text: 'Please enter valid Title', name: 'name' }});\r\n            return;\r\n        }\r\n\r\n        if (!files.length) {\r\n            this.setState({ isValid: { value: true, text: 'Please drop a file above', name: 'files' }});\r\n            return;\r\n        }\r\n        \r\n        await this.setState({ filesProgress: 0 });\r\n        let that = this;\r\n        const config = {\r\n            onUploadProgress: function(progressEvent) {\r\n                let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n                that.setState({ filesProgress: percentCompleted });\r\n            }\r\n        }\r\n        \r\n        let data = new FormData()\r\n        data.append('course-material', files[0]);\r\n        data.append('title', name.trim());\r\n        data.append('class_id', class_id);\r\n        \r\n        axios.post(`${configs.prod}/api/class/course/material/create`, data, config)\r\n            .then(response => {\r\n                this.props.history.push(`/faculty/class/list`);\r\n            })\r\n            .catch(err => {\r\n                console.log('Error: ', err.response);\r\n                if (err.response && err.response.status && (err.response.status === 400 || err.response.status === 500)) {\r\n                    if (err.response.status === 500 && err.response.data.error.name === 'SequelizeUniqueConstraintError') {\r\n                        this.setState({ filesProgress: 0, isValid: { value: true, text: 'Course Material with this title already exist', name:'server_error' } });\r\n                    } else {\r\n                        this.setState({ filesProgress: 0, isValid: { value: true, text: err.response.data.msg, name:'server_error' } });\r\n                    }\r\n                } else {\r\n                    this.setState({ filesProgress: 0, isValid: { value: true, text: 'Unknown Error', name:'server_error' } });\r\n                    //this.createNotification('error', 'Unknown Error');\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const filePreview = this.state.files.map((file, i) => (\r\n            <i key={i} style={{ fontSize: '20em' }} class=\"feather icon-file\"></i>\r\n        ));\r\n        const maxSize = 104857600 * 10;\r\n       \r\n        return (\r\n            <Aux>\r\n                {this.state.isLoading && <Loader />}\r\n\t\t\t\t<Row>\r\n                    <NotificationContainer/>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Add Assignment</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Form className=\"col-md-12\" onSubmit={(e) => this.handleSubmit(e)}>\r\n                                        <fieldset disabled={this.state.isLoading} className={this.state.isLoading ? 'opacity-5' : ''}>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                                        <Form.Label>Course Material Title</Form.Label>\r\n                                                        <Form.Control \r\n                                                            type=\"text\" \r\n                                                            name=\"name\" \r\n                                                            placeholder=\"Course Material Title\" \r\n                                                            value={this.state.name}\r\n                                                            className={this.state.isValid.value && this.state.isValid.name === 'name' ? 'in-valid-input' : ''}\r\n                                                            onFocus={() => this.setState({ isValid: { value: false, text: ''}})}\r\n                                                            onChange={(e) => this.handleTextChange(e.target) }\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Dropzone \r\n                                                        onDrop={this.onDropPhoto} \r\n                                                        // accept=\"video/*\" \r\n                                                        minSize={0}\r\n                                                        maxSize={maxSize}\r\n                                                        multiple={false}\r\n                                                    >\r\n                                                        {({getRootProps, getInputProps, isDragActive, isDragReject, rejectedFiles}) => {\r\n                                                            const isFileTooLarge = rejectedFiles && rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\r\n                                                            return (\r\n                                                                <section>\r\n                                                                    <div style={{ display: 'flex', alignItems: 'center', justifyContent:'center', borderWidth: 2, height: '25em', borderRadius: 2, textAlign: 'center', borderColor: '#eeeeee', borderStyle: 'dashed', backgroundColor: '#fafafa', color: '#bdbdbd' }} \r\n                                                                    {...getRootProps({className: 'dropzone',\r\n                                                                        onClick: event => event.stopPropagation()\r\n                                                                    })}>\r\n                                                                        <input {...getInputProps()} />\r\n                                                                        {!isDragActive && !filePreview.length && 'Drop a file to upload!'}\r\n                                                                        {isDragActive && !isDragReject && \"Drop it like it's hot!\"}\r\n                                                                        {isDragReject && \"File type not accepted, sorry!\"}\r\n                                                                        {isFileTooLarge && (\r\n                                                                            <div className=\"text-danger mt-2\">\r\n                                                                              File is too large. Max Size 1GB\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                        { filePreview }\r\n                                                                        { filePreview.length ? <div style={{ width: '15%', position: 'absolute', padding: 14, backgroundColor: 'whitesmoke', borderRadius: 20 }}>\r\n                                                                            <CircularProgressbar value={this.state.filesProgress} text={`${this.state.filesProgress}%`} /> \r\n                                                                            </div> : null \r\n                                                                        }\r\n                                                                    </div>\r\n                                                                    {\r\n                                                                        this.state.isValid.value && this.state.isValid.name === 'files' ?\r\n                                                                        <Form.Text style={{ color: 'red' }}>\r\n                                                                            { this.state.isValid.text }\r\n                                                                        </Form.Text> : ''\r\n                                                                    }\r\n                                                                </section>\r\n                                                            )}\r\n                                                        }\r\n                                                    </Dropzone>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <div>\r\n                                                        <Button type=\"submit\" style={{ marginTop: '1.8rem', width: '100%' }} variant={\"primary\"}>\r\n                                                            { 'Submit' }\r\n                                                        </Button>\r\n                                                        {\r\n                                                            this.state.isValid.value ?\r\n                                                            <Form.Text style={{ color: 'red' }}>\r\n                                                                { this.state.isValid.text }\r\n                                                            </Form.Text> : ''\r\n                                                        }\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                        </fieldset>\r\n                                    </Form>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userDetails.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AddCourseMaterial);\r\n"],"sourceRoot":""}