{"version":3,"sources":["Demo/dashboard/dashboard.js"],"names":["moment","require","Dashboard","props","createNotification","type","value","NotificationManager","info","success","warning","error","state","isLoading","deletedRowId","showModal","handleCloseModal","title","status","isValid","text","recordToUpdate","isEdit","data","columns","Header","accessor","Cell","row","className","format","variant","onClick","handleEdit","original","openDeleteModal","this","setState","id","job_title","active","axios","delete","config","prod","then","response","getJobTitleList","catch","err","console","log","e","preventDefault","trim","length","put","msg","post","show","onHide","closeButton","Title","Body","Footer","handleDelete","cancelDelete","as","onSubmit","handleSubmit","disabled","Row","md","lg","Group","controlId","Label","Control","name","placeholder","onFocus","onChange","handleTextChange","target","Text","style","color","Check","inline","custom","checked","label","cancelEdit","React","Component"],"mappings":"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","file":"static/js/5.ca3328fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, Button, Modal } from 'react-bootstrap';\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport axios from 'axios';\r\nimport 'react-table/react-table.css';\r\nimport config from '../../config';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Loader from '../../App/layout/Loader'\r\nvar moment = require('moment');\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n\t\t\tdeletedRowId: null,\r\n\t\t\tshowModal: false,\r\n\t\t\thandleCloseModal: false,\r\n            title: \"\",\r\n            status: true,\r\n            isValid: {\r\n                value: false,\r\n                text: ''   \r\n            },\r\n            recordToUpdate: '', \r\n            isEdit: false,\r\n            data: [],\r\n\t\t\tcolumns: [\r\n\t\t\t\t{\r\n\t\t\t\t\tHeader: 'Date Time',\r\n\t\t\t\t\taccessor: 'updatedAt',\r\n                    Cell: row => <p className=\"cell-custom\">{ moment(row.value).format('MM/DD/YYYY HH:mm:ss') }</p>\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t\tHeader: 'Job Title',\r\n\t\t\t\t\taccessor: 'job_title',\r\n                    Cell: row => <p className=\"cell-custom\">{ row.value }</p>\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t\tHeader: 'Status',\r\n\t\t\t\t\taccessor: 'active',\r\n                    Cell: row => <p className=\"cell-custom\">{ row.value ? 'active': 'inactive' }</p>\r\n                },\r\n                {\r\n                    Header: 'Actions',\r\n                    Cell: row => (\r\n                        <div className=\"action-btn\">\r\n                            <Button  variant=\"warning\" onClick={() => this.handleEdit(row.original)}>Edit</Button>\r\n                            <Button  variant=\"danger\" onClick={() => this.openDeleteModal(row.original)}>Delete</Button>\r\n                        </div>\r\n                    )\r\n                }\r\n\t\t\t],\r\n        }\r\n    }\r\n\r\n    handleTextChange(value) {\r\n        this.setState({ title: value });\r\n    }\r\n\r\n    handleEdit(value) {\r\n        this.setState({ isEdit: true, recordToUpdate: value.id, title: value.job_title, status: value.active });\r\n    }\r\n\r\n    openDeleteModal(value) {\r\n\t\tthis.setState({ isEdit: false, title: value.job_title, status: true, showModal: true, deletedRowId: value.id });\r\n\t}\r\n\tcloseDeleteModal() {\r\n\t\tthis.setState({ showModal: false });\r\n    }\r\n    \r\n    handleDelete() {\r\n        this.setState({ showModal: false, isLoading: true });\r\n\t\taxios.delete(`${config.prod}/api/choices/jobtitle/delete/${this.state.deletedRowId}`, { data: { id: this.state.deletedRowId } })\r\n\t\t\t.then(response => {\r\n\t\t\t\tthis.createNotification('success', 'Job Title Deleted Successfully');\r\n\t\t\t\tthis.getJobTitleList();\r\n\t\t\t\tthis.setState({ isLoading: false, title: '' });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis.setState({ isLoading: false, title: '' });\r\n\t\t\t\tconsole.log('Error: deleting data from db ', err.response);\r\n                this.createNotification('error', 'Error while deleting data from db');\r\n\t\t\t});\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getJobTitleList();\r\n    }\r\n    \r\n    getJobTitleList() {\r\n        // this.setState({ isLoading: true });\r\n\t\t// axios.get(`${config.prod}/api/choices/jobtitle/list`)\r\n\t\t// \t.then(response => {\r\n\t\t// \t\tthis.setState({ data: response.data.results, isLoading: false });\r\n\t\t// \t})\r\n\t\t// \t.catch(err => {\r\n\t\t// \t\tthis.setState({ isLoading: false });\r\n\t\t// \t\tconsole.log('Error: getting data from db ', err.response);\r\n        //             this.createNotification('error', 'Error while Getting data from db');\r\n\t\t// \t});\r\n    }\r\n\r\n    createNotification = (type, value) => {\r\n        switch (type) {\r\n            case 'info':\r\n                NotificationManager.info(value,'', 5000);\r\n                break;\r\n            case 'success':\r\n                NotificationManager.success(value, '', 5000);\r\n                break;\r\n            case 'warning':\r\n                NotificationManager.warning(value, '', 5000);\r\n                break;\r\n            case 'error':\r\n                NotificationManager.error(value, '', 5000);\r\n                break;\r\n            default: break;\r\n        }\r\n    };\r\n\r\n    cancelEdit() {\r\n\t\tthis.setState({ \r\n\t\t\tisEdit: false,\r\n\t\t\ttitle: ''\r\n\t\t})\r\n    }\r\n    cancelDelete() {\r\n\t\tthis.setState({ \r\n            isEdit: false,\r\n            showModal: false,\r\n\t\t\ttitle: ''\r\n\t\t})\r\n    }\r\n    \r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.state.title.trim().length === 0) {\r\n            this.setState({ isValid: { value: true, text: 'Please enter valid title' } });\r\n            return;\r\n        }\r\n\r\n        if(!this.state.isEdit) {\r\n\t\t\tthis.setState({ isLoading: true });\r\n            axios.post(`${config.prod}/api/choices/jobtitle/create`, { job_title: this.state.title, active: this.state.status })\r\n                .then(response => {\r\n                    this.setState({ isEdit: false, title: '', status: true, isLoading: false });\r\n                    this.createNotification('success', 'Job Title Created Successfully');\r\n                    this.getJobTitleList();\r\n                })\r\n                .catch(err => {\r\n\t\t\t\t\tconsole.log('Error: ', err.response);\r\n\t\t\t\t\tthis.setState({ isLoading: false });\r\n                    if (err.response && err.response.status && ( err.response.status === 409 || err.response.status === 400 || err.response.status === 500)) {\r\n                        this.setState({ isValid: { value: true, text: err.response.data.msg } });\r\n                        this.createNotification('error', err.response.data.msg);\r\n                    } else {\r\n                        this.setState({ isValid: { value: true, text: 'Unknown Error' } });\r\n                        this.createNotification('error', 'Unknown Error');\r\n                    }\r\n                });\r\n            \r\n        } else {\r\n\t\t\tthis.setState({ isLoading: true });\r\n            axios.put(`${config.prod}/api/choices/jobtitle/update/${this.state.recordToUpdate}`, { id: this.state.recordToUpdate, job_title: this.state.title, active: this.state.status })\r\n                .then(response => {\r\n                    this.setState({ isEdit: false, title: '', status: true, isLoading: false });\r\n                    this.createNotification('success', 'Job Title Updated Successfully');\r\n                    this.getJobTitleList();\r\n                })\r\n                .catch(err => {\r\n\t\t\t\t\tconsole.log('Error: ', err.response);\r\n\t\t\t\t\tthis.setState({ isLoading: false });\r\n                    if (err.response && err.response.status && ( err.response.status === 409 || err.response.status === 400 || err.response.status === 500)) {\r\n                        this.setState({ isValid: { value: true, text: err.response.data.msg } });\r\n                        this.createNotification('error', err.response.data.msg);\r\n                    } else {\r\n                        this.setState({ isValid: { value: true, text: 'Unknown Error' } });\r\n                        this.createNotification('error', 'Unknown Error');\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Aux>\r\n                {this.state.isLoading && <Loader />}\r\n\t\t\t\t{this.state.showModal && \r\n\t\t\t\t\t<Modal show={this.state.showModal} onHide={this.state.handleCloseModal}>\r\n\t\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t\t<Modal.Title>Delete Confirm</Modal.Title>\r\n\t\t\t\t\t</Modal.Header>\r\n\t\t\t\t\t<Modal.Body>Are you sure to want to delete {this.state.title} </Modal.Body>\r\n\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t<Button variant=\"primary\" onClick={() => this.handleDelete(this.state.deletedRowId)}>\r\n\t\t\t\t\t\t\tOK\r\n                        </Button>\r\n\t\t\t\t\t\t<Button variant=\"secondary\" onClick={() => this.cancelDelete()}>\r\n\t\t\t\t\t\t\tCancel\r\n                        </Button>\r\n\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t\t}\r\n                <Row>\r\n                    <NotificationContainer/>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">{this.state.isEdit ? 'Edit' : 'Create'} Job Title</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Form className=\"col-md-12\" onSubmit={(e) => this.handleSubmit(e)}>\r\n                                    <fieldset disabled={this.state.isLoading} className={this.state.isLoading ? 'opacity-5' : ''}>\r\n                                        <Form.Row>\r\n                                        <Col md={4} lg={5}>\r\n                                            <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                                <Form.Label>Title</Form.Label>\r\n                                                <Form.Control \r\n                                                    type=\"text\" \r\n                                                    name=\"title\" \r\n                                                    placeholder=\"Job Title\" \r\n                                                    value={this.state.title}\r\n                                                    className={this.state.isValid.value ? 'in-valid-input' : ''}\r\n                                                    onFocus={() => this.setState({ isValid: { value: false, text: ''}})}\r\n                                                    onChange={(e) => this.handleTextChange(e.target.value) }\r\n                                                />\r\n                                                {\r\n                                                    this.state.isValid.value ?\r\n                                                    <Form.Text style={{ color: 'red' }}>\r\n                                                        { this.state.isValid.text }\r\n                                                    </Form.Text> : ''\r\n                                                }\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={4} lg={3}>\r\n                                            <Form.Group className=\"mb-2\" controlId=\"status\">\r\n                                                <div> <Form.Label>Status</Form.Label> </div>\r\n                                                <div className=\"rg-pad\">\r\n                                                    <Form.Check\r\n                                                        inline\r\n                                                        custom\r\n                                                        type=\"radio\"\r\n                                                        checked={this.state.status}\r\n                                                        onChange={() => this.setState({ status: true })}\r\n                                                        label=\"Active\"\r\n                                                        name=\"active\"\r\n                                                        id=\"supportedRadio21\"\r\n                                                    />\r\n                                                    <Form.Check\r\n                                                        inline\r\n                                                        custom\r\n                                                        type=\"radio\"\r\n                                                        label=\"Inactive\"\r\n                                                        checked={!this.state.status}\r\n                                                        onChange={() => this.setState({ status: false })}\r\n                                                        name=\"active\"\r\n                                                        id=\"supportedRadio22\"\r\n                                                    />\r\n                                                </div>\r\n                                                \r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={4} lg={4}>\r\n                                            <div>\r\n                                                <Button type=\"submit\" className=\"mt-4\" variant={this.state.isEdit ? \"warning\": \"primary\"}>\r\n                                                    { this.state.isEdit ? 'Edit': 'Submit' }\r\n                                                </Button>\r\n                                                {   this.state.isEdit ? \r\n                                                    <Button className=\"mt-4\" onClick={() => this.cancelEdit()} variant=\"info\">\r\n                                                        Cancel\r\n                                                    </Button> : ''\r\n                                                }\r\n                                            </div>\r\n                                        </Col>\r\n                                        </Form.Row>\r\n                                    </fieldset>\r\n                                    </Form>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}