{"version":3,"sources":["Demo/Faculty/CourseContent/ListVideoLectures.js"],"names":["ListVideoLectures","props","componentDidMount","a","user","id","match","params","setState","class_id","getLecturesList","createNotification","type","value","NotificationManager","info","success","warning","error","state","isLoading","deletedRowId","showModal","handleCloseModal","isValid","text","data","this","isEdit","name","status","axios","delete","config","prod","then","response","catch","err","console","log","get","show","onHide","Header","closeButton","Title","Body","Footer","variant","onClick","handleDelete","cancelDelete","as","map","elem","i","key","sm","controls","style","maxWidth","maxHeight","src","file","description","React","Component","connect","userDetails"],"mappings":"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","file":"static/js/55.9c412106.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Button, Modal } from 'react-bootstrap';\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport axios from 'axios';\r\nimport config from '../../../config';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Loader from '../../../App/layout/Loader';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ListVideoLectures extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n\t\t\tdeletedRowId: null,\r\n\t\t\tshowModal: false,\r\n\t\t\thandleCloseModal: false,\r\n            isValid: {\r\n                value: false,\r\n                text: ''   \r\n            },\r\n            data: [],\r\n            class_id: ''\r\n        }\r\n    }\r\n\r\n    openDeleteModal(value) {\r\n\t\tthis.setState({ isEdit: false, name: value.name, status: true, showModal: true, deletedRowId: value.id });\r\n    }\r\n    \r\n\tcloseDeleteModal() {\r\n\t\tthis.setState({ showModal: false });\r\n    }\r\n    \r\n    handleDelete() {\r\n        this.setState({ showModal: false, isLoading: true });\r\n\t\taxios.delete(`${config.prod}/api/class/delete`, { data: { class_id: this.state.deletedRowId } })\r\n\t\t\t.then(response => {\r\n\t\t\t\tthis.createNotification('success', 'Class Deleted Successfully');\r\n\t\t\t\tthis.getLecturesList();\r\n\t\t\t\tthis.setState({ isLoading: false, name: '' });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis.setState({ isLoading: false, name: '' });\r\n\t\t\t\tconsole.log('Error: deleting data from db ', err.response);\r\n                this.createNotification('error', 'Error while deleting data from db');\r\n\t\t\t});\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        if (this.props && this.props.user && this.props.user.id && this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            await this.setState({ class_id: this.props.match.params.id })\r\n            this.getLecturesList();\r\n        }\r\n    }\r\n    \r\n    getLecturesList() {\r\n        this.setState({ isLoading: true });\r\n\t\taxios.get(`${config.prod}/api/class/${this.state.class_id}/lecture/list`)\r\n\t\t\t.then(response => {\r\n\t\t\t\tthis.setState({ data: response.data.data, isLoading: false });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis.setState({ isLoading: false });\r\n\t\t\t\tconsole.log('Error: getting data from db ', err.response);\r\n                this.createNotification('error', 'Error while Getting data from db');\r\n\t\t\t});\r\n    }\r\n\r\n    createNotification = (type, value) => {\r\n        switch (type) {\r\n            case 'info':\r\n                NotificationManager.info(value,'', 5000);\r\n                break;\r\n            case 'success':\r\n                NotificationManager.success(value, '', 5000);\r\n                break;\r\n            case 'warning':\r\n                NotificationManager.warning(value, '', 5000);\r\n                break;\r\n            case 'error':\r\n                NotificationManager.error(value, '', 5000);\r\n                break;\r\n            default: break;\r\n        }\r\n    };\r\n\r\n    cancelDelete() {\r\n\t\tthis.setState({ \r\n            isEdit: false,\r\n            showModal: false,\r\n\t\t\tname: ''\r\n\t\t});\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Aux>\r\n                {this.state.isLoading && <Loader />}\r\n\t\t\t\t{this.state.showModal && \r\n\t\t\t\t\t<Modal show={this.state.showModal} onHide={() => this.setState({ showModal: false })}>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Delete Confirm</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>Are you sure to want to delete <b>{this.state.name}</b> </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"primary\" onClick={() => this.handleDelete()}>\r\n                                OK\r\n                            </Button>\r\n                            <Button variant=\"secondary\" onClick={() => this.cancelDelete()}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n\t\t\t\t}\r\n                <Row>\r\n                    <NotificationContainer/>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Lectures List</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.data.map((elem, i) => (\r\n                                                <Col key={elem.id}>\r\n                                                    <Card>\r\n                                                        <Card.Header><b># {i+1}: {elem.name}</b></Card.Header>\r\n                                                        <Card.Body>\r\n                                                            <Row>\r\n                                                                <Col sm={6}>\r\n                                                                    <video controls style={{ maxWidth: '100%', maxHeight: '100%' }}>\r\n                                                                        <source src={`${config.prod}/${elem.file}`} />\r\n                                                                        Sorry, your browser doesn't support embedded videos.\r\n                                                                    </video>\r\n                                                                </Col>\r\n                                                                <Col sm={6}>\r\n                                                                    <h5>Description</h5>\r\n                                                                    <hr />\r\n                                                                    <p>\r\n                                                                        {elem.description}\r\n                                                                    </p>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                </Col>\r\n                                            ))\r\n                                        }\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userDetails.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ListVideoLectures);\r\n"],"sourceRoot":""}