{"version":3,"sources":["Demo/Users/GeneralTopics/DiscussionForm.js"],"names":["DiscusionForum","props","componentDidMount","a","user","id","match","params","setState","topic_id","getTopic","createNotification","type","value","NotificationManager","info","success","warning","error","submitComment","e","preventDefault","comment","state","trim","length","isLoading","axios","post","config","prod","user_id","then","response","catch","err","console","log","isValid","text","data","class_id","this","get","Header","Title","as","name","Body","md","span","offset","description","comments","map","elem","key","first_name","last_name","disabled","className","Row","Group","controlId","Control","rows","placeholder","onFocus","onChange","handleTextChange","target","style","width","onClick","variant","React","Component","connect","userDetails"],"mappings":"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","file":"static/js/60.69bd168c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, Button, Badge } from 'react-bootstrap';\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport axios from 'axios';\r\nimport config from '../../../config';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Loader from '../../../App/layout/Loader';\r\nimport { connect } from 'react-redux';\r\n\r\nclass DiscusionForum extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            isValid: {\r\n                value: false,\r\n                text: ''   \r\n            },\r\n            data: {},\r\n            topic_id: '',\r\n            class_id: '',\r\n            comment: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        if (this.props && this.props.user && this.props.user.id && this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            await this.setState({ topic_id: this.props.match.params.id });\r\n            this.getTopic();\r\n        }\r\n    }\r\n    \r\n    getTopic() {\r\n        this.setState({ isLoading: true });\r\n\t\taxios.get(`${config.prod}/api/users/topic/${this.state.topic_id}/general`)\r\n\t\t\t.then(response => {\r\n                let data = response.data.data;\r\n\t\t\t\tthis.setState({ data: data, isLoading: false });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis.setState({ isLoading: false });\r\n\t\t\t\tconsole.log('Error: getting data from db ', err.response);\r\n                this.createNotification('error', 'Error while Getting data from db');\r\n\t\t\t});\r\n    }\r\n\r\n    createNotification = (type, value) => {\r\n        switch (type) {\r\n            case 'info':\r\n                NotificationManager.info(value,'', 5000);\r\n                break;\r\n            case 'success':\r\n                NotificationManager.success(value, '', 5000);\r\n                break;\r\n            case 'warning':\r\n                NotificationManager.warning(value, '', 5000);\r\n                break;\r\n            case 'error':\r\n                NotificationManager.error(value, '', 5000);\r\n                break;\r\n            default: break;\r\n        }\r\n    };\r\n\r\n    handleTextChange(e) {\r\n        this.setState({ 'comment' : e.value });\r\n    }\r\n\r\n    submitComment = async (e) => {\r\n            e.preventDefault();\r\n            const { comment } = this.state;\r\n            if (!comment && comment.trim().length <= 0) {\r\n                return;\r\n            }\r\n\r\n            await this.setState({ isLoading: true });\r\n\t\t    axios.post(`${config.prod}/api/comment/create`, { user_id: this.props.user.id, topic_id: this.state.topic_id, comment: comment.trim() })\r\n                .then(async response => {\r\n                    await this.setState({ comment: '' });\r\n\t\t            this.getTopic();\r\n                })\r\n                .catch(err => {\r\n                    this.setState({ isLoading: false });\r\n                    console.log('Error: getting data from db ', err.response);\r\n                    this.createNotification('error', 'Error while Getting data from db');\r\n                });\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Aux>\r\n                {this.state.isLoading && <Loader />}\r\n\t\t\t    <Row>\r\n                    <NotificationContainer/>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">{ this.state.data.name ? this.state.data.name : null }</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                   <Col md={{ span: 8, offset: 2 }}>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <Card>\r\n                                                    <Card.Body>\r\n                                                        <p>{ this.state.data.description ? this.state.data.description : null }</p>\r\n                                                    </Card.Body>  \r\n                                                </Card>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                { this.state.data.comments ? this.state.data.comments.map(elem => (\r\n                                                    <Row key={elem.id}>\r\n                                                        <Col>\r\n                                                            <Card>\r\n                                                                <Card.Header>\r\n                                                                    <Card.Title as='h6'>\r\n                                                                        { `${elem.user.first_name} ${elem.user.last_name}` }\r\n                                                                    </Card.Title>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body>\r\n                                                                    { elem.comment }\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                    )) : null\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col>\r\n\t\t\t\t\t\t\t\t\t\t        <fieldset disabled={this.state.isLoading} className={this.state.isLoading ? 'opacity-5' : ''}>\r\n                                                    <Form>\r\n                                                        <Form.Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                                                    <Form.Control \r\n                                                                        as=\"textarea\" \r\n                                                                        name='comment'\r\n                                                                        rows={4}\r\n                                                                        placeholder={'Write a comment...'}\r\n                                                                        value={this.state.comment}\r\n                                                                        className={this.state.isValid.value && this.state.isValid.name === 'description' ? 'in-valid-input' : ''}\r\n                                                                        onFocus={() => this.setState({ isValid: { value: false, text: ''}})}\r\n                                                                        onChange={(e) => this.handleTextChange(e.target) }\r\n                                                                    />\r\n                                                               </Form.Group>\r\n                                                            </Col>\r\n                                                        </Form.Row>\r\n                                                        <Form.Row>\r\n                                                            <Col>\r\n                                                                <Form.Group controlId=\"exampleForm.ControlTextarea1\" className='text-center'>\r\n                                                                    <Button style={{ width: '50%' }} onClick={(e) => this.submitComment(e)} variant={'outline-primary'}>{ 'Submit Now' }</Button>\r\n                                                                </Form.Group>\r\n                                                            </Col>\r\n                                                        </Form.Row>\r\n                                                    </Form>\r\n                                                </fieldset>\r\n                                            </Col>\r\n                                        </Row>\r\n                                   </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userDetails.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(DiscusionForum);\r\n"],"sourceRoot":""}