{"version":3,"sources":["Demo/Faculty/Quizes/AddQuiz.js"],"names":["AddQuiz","props","handleConnectionChange","e","name","preventDefault","options","state","target","dataset","id","value","setState","appenedNewOptions","question","op1","op2","op3","op4","correct","correct_option","deleteFromOptions","idx","optionss","splice","componentDidMount","a","user","match","params","class_id","createNotification","type","NotificationManager","info","success","warning","error","onDropPhoto","files","isValid","text","isLoading","deletedRowId","showModal","handleCloseModal","description","total_marks","data","submission_date","event","this","op","_d","toISOString","trim","length","axios","post","configs","prod","title","JSON","stringify","then","response","history","push","catch","err","console","log","status","filesProgress","msg","yesterday","moment","subtract","Header","Title","as","Body","className","onSubmit","handleSubmit","disabled","Row","md","span","offset","Group","controlId","Label","Control","placeholder","onFocus","onChange","handleTextChange","min","isValidDate","current","isAfter","inputProps","readOnly","handleChange","style","width","marginTop","onClick","variant","map","val","questionId","op1Id","op2Id","op3Id","op4Id","key","padding","border","float","data-id","onKeyPress","Check","inline","label","toggleEnabled","checked","textAlign","borderTop","borderLeft","borderRight","Text","color","React","Component","connect","userDetails"],"mappings":"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","file":"static/js/58.9df76410.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, Button } from 'react-bootstrap';\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport axios from 'axios';\r\nimport configs from '../../../config';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Loader from '../../../App/layout/Loader';\r\nimport { connect } from 'react-redux';\r\nimport DateTime from 'react-datetime';\r\nimport moment from 'moment';\r\n\r\nclass AddQuiz extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onDropPhoto = (files) => {\r\n            this.setState({ files: files, isValid: { value: true, text: '' } });\r\n        };\r\n        this.state = {\r\n            isLoading: false,\r\n\t\t\tdeletedRowId: null,\r\n\t\t\tshowModal: false,\r\n\t\t\thandleCloseModal: false,\r\n            name: \"\",\r\n            description: \"\",\r\n            class_id: \"\",\r\n            total_marks: 0,\r\n            isValid: {\r\n                value: false,\r\n                text: ''   \r\n            },\r\n            data: [],\r\n            options: [{ \r\n                question: '',\r\n                op1: '',\r\n                op2: '',\r\n                op3: '',\r\n                op4: '',\r\n                correct: 'op1',\r\n                correct_option: { op1: true, op2: false, op3: false, op4: false },\r\n            }],\r\n            submission_date: ''\r\n        }\r\n    }\r\n\r\n    handleTextChange(event) {\r\n        this.setState({ [event.name]: event.value });\r\n    }\r\n\r\n    handleConnectionChange = (e, name) => {\r\n        e.preventDefault();\r\n        let options = [...this.state.options];\r\n        options[e.target.dataset.id][name] = e.target.value;\r\n        this.setState({ options });\r\n    }\r\n\r\n    toggleEnabled(e, name, op) {\r\n        let options = [...this.state.options];\r\n        if (op === 'op1') {\r\n            options[e.target.dataset.id][name]['op1'] = true;\r\n            options[e.target.dataset.id][name]['op2'] = false;\r\n            options[e.target.dataset.id][name]['op3'] = false;\r\n            options[e.target.dataset.id][name]['op4'] = false;\r\n            options[e.target.dataset.id]['correct'] = 'op1';\r\n        }\r\n        if (op === 'op2') {\r\n            options[e.target.dataset.id][name]['op1'] = false;\r\n            options[e.target.dataset.id][name]['op2'] = true;\r\n            options[e.target.dataset.id][name]['op3'] = false;\r\n            options[e.target.dataset.id][name]['op4'] = false;\r\n            options[e.target.dataset.id]['correct'] = 'op2';\r\n        }\r\n        if (op === 'op3') {\r\n            options[e.target.dataset.id][name]['op1'] = false;\r\n            options[e.target.dataset.id][name]['op2'] = false;\r\n            options[e.target.dataset.id][name]['op3'] = true;\r\n            options[e.target.dataset.id][name]['op4'] = false;\r\n            options[e.target.dataset.id]['correct'] = 'op3';\r\n        }\r\n        if (op === 'op4') {\r\n            options[e.target.dataset.id][name]['op1'] = false;\r\n            options[e.target.dataset.id][name]['op2'] = false;\r\n            options[e.target.dataset.id][name]['op3'] = false;\r\n            options[e.target.dataset.id][name]['op4'] = true;\r\n            options[e.target.dataset.id]['correct'] = 'op4';\r\n        }\r\n        this.setState({ options });\r\n    }\r\n\r\n    appenedNewOptions = (e) => {\r\n        e.preventDefault();\r\n        const { options } = this.state;\r\n        this.setState({\r\n            options: \r\n            [...options, { \r\n                    question: '',\r\n                    op1: '',\r\n                    op2: '',\r\n                    op3: '',\r\n                    op4: '',\r\n                    correct: 'op1',\r\n                    correct_option: { op1: true, op2: false, op3: false, op4: false },\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    deleteFromOptions = (e, idx) => {\r\n        e.preventDefault();\r\n        const { options } = this.state;\r\n        let optionss = options.splice(idx, 1);\r\n        this.setState({ optionss });\r\n    }\r\n    \r\n    componentDidMount = async () => {\r\n       if (this.props && this.props.user && this.props.user.id && this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            await this.setState({ class_id: this.props.match.params.id })\r\n        }\r\n    }\r\n    \r\n\r\n    createNotification = (type, value) => {\r\n        switch (type) {\r\n            case 'info':\r\n                NotificationManager.info(value,'', 5000);\r\n                break;\r\n            case 'success':\r\n                NotificationManager.success(value, '', 5000);\r\n                break;\r\n            case 'warning':\r\n                NotificationManager.warning(value, '', 5000);\r\n                break;\r\n            case 'error':\r\n                NotificationManager.error(value, '', 5000);\r\n                break;\r\n            default: break;\r\n        }\r\n    };\r\n\r\n    handleChange(e,name) {\r\n        this.setState({ [name]: e._d.toISOString() });\r\n    }\r\n    \r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n        const { name, class_id, total_marks, submission_date, options  } = this.state;\r\n\r\n        if (!name && name.trim().length <= 0) {\r\n            this.setState({ isValid: { value: true, text: 'Please enter valid Quiz Title', name: 'name' }});\r\n            return;\r\n        }\r\n\r\n        if (total_marks <= 0) {\r\n            this.setState({ isValid: { value: true, text: 'Please enter valid Quiz Total Marks', name: 'total_marks' }});\r\n            return;\r\n        }\r\n\r\n        if (!submission_date && submission_date.trim().length <= 0) {\r\n            this.setState({ isValid: { value: true, text: 'Please enter valid Quiz Submission Date', name: 'submission_date' }});\r\n            return;\r\n        }\r\n        \r\n        axios.post(`${configs.prod}/api/class/quiz/create`, { title: name.trim(), total_marks: total_marks, class_id, submission_date: submission_date.trim(), options: JSON.stringify(options) })\r\n            .then(response => {\r\n                this.props.history.push(`/faculty/class/list`);\r\n            })\r\n            .catch(err => {\r\n                console.log('Error: ', err.response);\r\n                if (err.response && err.response.status && (err.response.status === 400 || err.response.status === 500)) {\r\n                    if (err.response.status === 500 && err.response.data.error.name === 'SequelizeUniqueConstraintError') {\r\n                        this.setState({ filesProgress: 0, isValid: { value: true, text: 'Quiz with this title already exist', name:'server_error' } });\r\n                    } else {\r\n                        this.setState({ filesProgress: 0, isValid: { value: true, text: err.response.data.msg, name:'server_error' } });\r\n                    }\r\n                } else {\r\n                    this.setState({ filesProgress: 0, isValid: { value: true, text: 'Unknown Error', name:'server_error' } });\r\n                    //this.createNotification('error', 'Unknown Error');\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const yesterday = moment().subtract(1, 'day');\r\n        const disablePastDt = current => {\r\n          return current.isAfter(yesterday);\r\n        };\r\n        const { options } = this.state;\r\n        \r\n        return (\r\n            <Aux>\r\n                {this.state.isLoading && <Loader />}\r\n\t\t\t\t<Row>\r\n                    <NotificationContainer/>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Add Assignment</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Form className=\"col-md-12\" onSubmit={(e) => this.handleSubmit(e)}>\r\n                                        <fieldset disabled={this.state.isLoading} className={this.state.isLoading ? 'opacity-5' : ''}>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                                        <Form.Label>Quiz Title</Form.Label>\r\n                                                        <Form.Control \r\n                                                            type=\"text\" \r\n                                                            name=\"name\" \r\n                                                            placeholder=\"Quiz Title\" \r\n                                                            value={this.state.name}\r\n                                                            className={this.state.isValid.value && this.state.isValid.name === 'name' ? 'in-valid-input' : ''}\r\n                                                            onFocus={() => this.setState({ isValid: { value: false, text: ''}})}\r\n                                                            onChange={(e) => this.handleTextChange(e.target) }\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                                        <Form.Label>Quiz Total Marks</Form.Label>\r\n                                                        <Form.Control \r\n                                                            type=\"number\" \r\n                                                            name=\"total_marks\" \r\n                                                            min={0}\r\n                                                            placeholder=\"Assignment Total Marks\" \r\n                                                            value={this.state.total_marks}\r\n                                                            className={this.state.isValid.value && this.state.isValid.name === 'total_marks' ? 'in-valid-input' : ''}\r\n                                                            onFocus={() => this.setState({ isValid: { value: false, text: ''}})}\r\n                                                            onChange={(e) => this.handleTextChange(e.target) }\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                                        <Form.Label>Submission Date</Form.Label>\r\n                                                        <DateTime \r\n                                                            isValidDate={disablePastDt}\r\n                                                            inputProps={{ readOnly: true }}\r\n                                                            className={this.state.isValid.value && this.state.isValid.name === 'submission_date' ? 'in-valid-input' : ''}\r\n                                                            onFocus={() => this.setState({ isValid: { value: false, text: '', name:''}})}\r\n                                                            onChange={ (e) => this.handleChange(e,'submission_date')} \r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Button \r\n                                                        style={{ width: '100%', marginTop: 10}} \r\n                                                        onClick={(e) => this.appenedNewOptions(e)} \r\n                                                        variant=\"outline-primary\"\r\n                                                    > \r\n                                                        Add New Question \r\n                                                    </Button>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n\r\n                                            {\r\n                                                this.state.options.map((val, idx) => {\r\n                                                    let questionId=`question-${idx}`, op1Id=`op1-${idx}`, op2Id=`op2-${idx}`, op3Id=`op3-${idx}`, op4Id=`op4-${idx}`, correctOptionId=`correct_option-${idx}`;\r\n                                                    return (\r\n                                                    <div key={idx} style={{ padding: 10 }}>\r\n                                                        <Form.Row>\r\n                                                            <Col md={{ span: 8, offset: 2 }} style={{ border: '2px solid #007bff', padding: 10, marginTop: 5 }}>\r\n                                                                <button style={{ float: 'right' }} onClick={(e) => this.deleteFromOptions(e,idx) }>\r\n                                                                    <i className=\"fa fa-times\"></i>\r\n                                                                </button>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <Form.Group className=\"mb-2\">\r\n                                                                            <Form.Label>Question</Form.Label>\r\n                                                                            <Form.Control \r\n                                                                                type=\"text\" \r\n                                                                                name={questionId} \r\n                                                                                data-id={idx}\r\n                                                                                id={questionId}\r\n                                                                                value={options[idx].question}\r\n                                                                                onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                                                                onChange={(e) => this.handleConnectionChange(e, 'question')}\r\n                                                                            />\r\n                                                                        </Form.Group>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                                <Row>\r\n                                                                    <Col md={6}>\r\n                                                                        <Form.Group className=\"mb-2\">\r\n                                                                            <Form.Label>Option 1</Form.Label>\r\n                                                                            <Form.Control \r\n                                                                                type=\"text\" \r\n                                                                                name={op1Id}\r\n                                                                                data-id={idx}\r\n                                                                                id={op1Id}\r\n                                                                                value={options[idx].op1}\r\n                                                                                onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                                                                onChange={(e) => this.handleConnectionChange(e, 'op1')}\r\n                                                                            />\r\n                                                                        </Form.Group>\r\n                                                                    </Col>\r\n                                                                    <Col md={6}>\r\n                                                                        <Form.Group className=\"mb-2\">\r\n                                                                            <Form.Label>Option 2</Form.Label>\r\n                                                                            <Form.Control \r\n                                                                                type=\"text\" \r\n                                                                                name={op2Id}\r\n                                                                                data-id={idx}\r\n                                                                                id={op2Id}\r\n                                                                                value={options[idx].op2}\r\n                                                                                onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                                                                onChange={(e) => this.handleConnectionChange(e, 'op2')}\r\n                                                                            />\r\n                                                                        </Form.Group>\r\n                                                                    </Col>\r\n                                                                    <Col md={6}>\r\n                                                                        <Form.Group className=\"mb-2\">\r\n                                                                            <Form.Label>Option 3</Form.Label>\r\n                                                                            <Form.Control \r\n                                                                                type=\"text\" \r\n                                                                                name={op3Id}\r\n                                                                                data-id={idx}\r\n                                                                                id={op3Id}\r\n                                                                                value={options[idx].op3}\r\n                                                                                onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                                                                onChange={(e) => this.handleConnectionChange(e, 'op3')}\r\n                                                                            />\r\n                                                                        </Form.Group>\r\n                                                                    </Col>\r\n                                                                    <Col md={6}>\r\n                                                                        <Form.Group className=\"mb-2\">\r\n                                                                            <Form.Label>Option 4</Form.Label>\r\n                                                                            <Form.Control \r\n                                                                                type=\"text\" \r\n                                                                                name={op4Id}\r\n                                                                                data-id={idx}\r\n                                                                                id={op4Id}\r\n                                                                                value={options[idx].op4}\r\n                                                                                onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                                                                                onChange={(e) => this.handleConnectionChange(e, 'op4')}\r\n                                                                            />\r\n                                                                        </Form.Group>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <Form.Group className=\"mb-2\">\r\n                                                                            <Form.Label>Correct Option</Form.Label><br />\r\n                                                                            <Form.Check inline label=\"option 1\" data-id={idx} onChange={(e) => this.toggleEnabled(e, 'correct_option', 'op1')}  checked={options[idx].correct_option.op1} type={'radio'} id={`inline-radio-1-${idx}`} />\r\n                                                                            <Form.Check inline label=\"option 2\" data-id={idx} onChange={(e) => this.toggleEnabled(e, 'correct_option', 'op2')}  checked={options[idx].correct_option.op2} type={'radio'} id={`inline-radio-2-${idx}`} />\r\n                                                                            <Form.Check inline label=\"option 3\" data-id={idx} onChange={(e) => this.toggleEnabled(e, 'correct_option', 'op3')}  checked={options[idx].correct_option.op3} type={'radio'} id={`inline-radio-3-${idx}`} />\r\n                                                                            <Form.Check inline label=\"option 4\" data-id={idx} onChange={(e) => this.toggleEnabled(e, 'correct_option', 'op4')}  checked={options[idx].correct_option.op4} type={'radio'} id={`inline-radio-4-${idx}`} />\r\n                                                                        </Form.Group>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Col>\r\n                                                        </Form.Row>\r\n                                                    </div>\r\n                                                    )\r\n                                                })\r\n                                                }\r\n                                            { this.state.options.length ?   \r\n                                                <Form.Row>\r\n                                                    <Col md={{ span: 8, offset: 2 }} style={{ textAlign: 'center', marginTop: 10 }}>\r\n                                                        <Button \r\n                                                            style={{ marginTop: 10, borderTop: '0px', borderLeft: '0px', borderRight: '0px' }} \r\n                                                            onClick={(e) => this.appenedNewOptions(e)} \r\n                                                            variant=\"outline-primary\"\r\n                                                        > \r\n                                                            + Add New Question \r\n                                                        </Button>\r\n                                                    </Col>\r\n                                                </Form.Row>\r\n                                                : null\r\n                                            }\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <div>\r\n                                                        <Button type=\"submit\" style={{ marginTop: '1.8rem', width: '100%' }} variant={\"primary\"}>\r\n                                                            { 'Submit' }\r\n                                                        </Button>\r\n                                                        {\r\n                                                            this.state.isValid.value ?\r\n                                                            <Form.Text style={{ color: 'red' }}>\r\n                                                                { this.state.isValid.text }\r\n                                                            </Form.Text> : ''\r\n                                                        }\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                        </fieldset>\r\n                                    </Form>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userDetails.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AddQuiz);\r\n"],"sourceRoot":""}