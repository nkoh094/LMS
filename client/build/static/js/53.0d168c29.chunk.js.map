{"version":3,"sources":["Demo/Faculty/CourseContent/AddTopic.js"],"names":["AddTopic","props","componentDidMount","a","user","id","match","params","setState","class_id","createNotification","type","value","NotificationManager","info","success","warning","error","state","isLoading","deletedRowId","showModal","handleCloseModal","name","description","isValid","text","event","this","e","preventDefault","trim","length","axios","post","configs","prod","user_id","then","response","history","push","catch","err","console","log","status","data","msg","Header","Title","as","Body","className","onSubmit","handleSubmit","disabled","Row","md","span","offset","Group","controlId","Label","Control","placeholder","onFocus","onChange","handleTextChange","target","rows","style","marginTop","width","variant","Text","color","React","Component","connect","userDetails"],"mappings":"4SASMA,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAqBVC,kBAtBmB,sBAsBC,sBAAAC,EAAA,2DACb,EAAKF,OAAS,EAAKA,MAAMG,MAAQ,EAAKH,MAAMG,KAAKC,IAAM,EAAKJ,MAAMK,OAAS,EAAKL,MAAMK,MAAMC,QAAU,EAAKN,MAAMK,MAAMC,OAAOF,IADjH,gCAEN,EAAKG,SAAS,CAAEC,SAAU,EAAKR,MAAMK,MAAMC,OAAOF,KAF5C,2CAtBD,EA6BnBK,mBAAqB,SAACC,EAAMC,GACxB,OAAQD,GACJ,IAAK,OACDE,sBAAoBC,KAAKF,EAAM,GAAI,KACnC,MACJ,IAAK,UACDC,sBAAoBE,QAAQH,EAAO,GAAI,KACvC,MACJ,IAAK,UACDC,sBAAoBG,QAAQJ,EAAO,GAAI,KACvC,MACJ,IAAK,QACDC,sBAAoBI,MAAML,EAAO,GAAI,OAtC7C,EAAKM,MAAQ,CACTC,WAAW,EACpBC,aAAc,KACdC,WAAW,EACXC,kBAAkB,EACTC,KAAM,GACNC,YAAa,GACbf,SAAU,GACVgB,QAAS,CACLb,OAAO,EACPc,KAAM,KAbC,E,6DAkBFC,GACbC,KAAKpB,SAAS,CAAE,CAACmB,EAAMJ,MAAOI,EAAMf,U,4EA6BrBiB,G,uFACfA,EAAEC,iB,EACuCF,KAAKV,MAAtCK,E,EAAAA,KAAMC,E,EAAAA,YAAaf,E,EAAAA,SAEtBc,KAAQA,EAAKQ,OAAOC,QAAU,G,uBAC/BJ,KAAKpB,SAAS,CAAEiB,QAAS,CAAEb,OAAO,EAAMc,KAAM,gCAAiCH,KAAM,U,6BAIpFC,KAAeA,EAAYO,OAAOC,QAAU,G,uBAC7CJ,KAAKpB,SAAS,CAAEiB,QAAS,CAAEb,OAAO,EAAMc,KAAM,uCAAwCH,KAAM,iB,0BAIhGU,IAAMC,KAAN,UAAcC,IAAQC,KAAtB,qBAA+C,CAAEb,KAAMA,EAAKQ,OAAQP,YAAaA,EAAYO,OAAQtB,WAAUE,MAAM,EAAM0B,QAAST,KAAK3B,MAAMG,KAAKC,KAC/IiC,MAAK,SAAAC,GACF,EAAKtC,MAAMuC,QAAQC,KAAnB,0BAEHC,OAAM,SAAAC,GACHC,QAAQC,IAAI,UAAWF,EAAIJ,UACvBI,EAAIJ,UAAYI,EAAIJ,SAASO,SAAmC,MAAxBH,EAAIJ,SAASO,QAA0C,MAAxBH,EAAIJ,SAASO,QACxD,MAAxBH,EAAIJ,SAASO,QAAmD,mCAAjCH,EAAIJ,SAASQ,KAAK9B,MAAMM,KACvD,EAAKf,SAAS,CAAEiB,QAAS,CAAEb,OAAO,EAAMc,KAAM,qCAAsCH,KAAK,kBAEzF,EAAKf,SAAS,CAAEiB,QAAS,CAAEb,OAAO,EAAMc,KAAMiB,EAAIJ,SAASQ,KAAKC,IAAKzB,KAAK,kBAG9E,EAAKf,SAAS,CAAEiB,QAAS,CAAEb,OAAO,EAAMc,KAAM,gBAAiBH,KAAK,qB,sIAM1E,IAAD,OACL,OACI,kBAAC,IAAD,KACKK,KAAKV,MAAMC,WAAa,kBAAC,IAAD,MACrC,kBAAC,IAAD,KACgB,kBAAC,wBAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAK8B,OAAN,KACI,kBAAC,IAAKC,MAAN,CAAYC,GAAG,MAAf,6BAEJ,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMC,UAAU,YAAYC,SAAU,SAACzB,GAAD,OAAO,EAAK0B,aAAa1B,KAC3D,8BAAU2B,SAAU5B,KAAKV,MAAMC,UAAWkC,UAAWzB,KAAKV,MAAMC,UAAY,YAAc,IACtF,kBAAC,IAAKsC,IAAN,KACI,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,kBAAC,IAAKC,MAAN,CAAYR,UAAU,OAAOS,UAAU,kBACnC,kBAAC,IAAKC,MAAN,mBACA,kBAAC,IAAKC,QAAN,CACIrD,KAAK,OACLY,KAAK,OACL0C,YAAY,aACZrD,MAAOgB,KAAKV,MAAMK,KAClB8B,UAAWzB,KAAKV,MAAMO,QAAQb,OAAqC,SAA5BgB,KAAKV,MAAMO,QAAQF,KAAkB,iBAAmB,GAC/F2C,QAAS,kBAAM,EAAK1D,SAAS,CAAEiB,QAAS,CAAEb,OAAO,EAAOc,KAAM,OAC9DyC,SAAU,SAACtC,GAAD,OAAO,EAAKuC,iBAAiBvC,EAAEwC,cAKzD,kBAAC,IAAKZ,IAAN,KACI,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,kBAAC,IAAKC,MAAN,CAAYC,UAAU,gCAClB,kBAAC,IAAKC,MAAN,0BACA,kBAAC,IAAKC,QAAN,CACIb,GAAG,WACH5B,KAAK,cACL+C,KAAM,EACN1D,MAAOgB,KAAKV,MAAMM,YAClB6B,UAAWzB,KAAKV,MAAMO,QAAQb,OAAqC,gBAA5BgB,KAAKV,MAAMO,QAAQF,KAAyB,iBAAmB,GACtG2C,QAAS,kBAAM,EAAK1D,SAAS,CAAEiB,QAAS,CAAEb,OAAO,EAAOc,KAAM,OAC9DyC,SAAU,SAACtC,GAAD,OAAO,EAAKuC,iBAAiBvC,EAAEwC,cAKzD,kBAAC,IAAKZ,IAAN,KACI,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,6BACI,kBAAC,IAAD,CAAQjD,KAAK,SAAS4D,MAAO,CAAEC,UAAW,SAAUC,MAAO,QAAUC,QAAS,WACxE,UAGF9C,KAAKV,MAAMO,QAAQb,MACnB,kBAAC,IAAK+D,KAAN,CAAWJ,MAAO,CAAEK,MAAO,QACrBhD,KAAKV,MAAMO,QAAQC,MACV,kB,GA5IpDmD,IAAMC,WAmKdC,uBANS,SAAA7D,GACpB,MAAO,CACHd,KAAMc,EAAM8D,YAAY5E,QAIQ,KAAzB2E,CAA+B/E","file":"static/js/53.0d168c29.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, Button } from 'react-bootstrap';\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport axios from 'axios';\r\nimport configs from '../../../config';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Loader from '../../../App/layout/Loader';\r\nimport { connect } from 'react-redux';\r\n\r\nclass AddTopic extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            isLoading: false,\r\n\t\t\tdeletedRowId: null,\r\n\t\t\tshowModal: false,\r\n\t\t\thandleCloseModal: false,\r\n            name: \"\",\r\n            description: \"\",\r\n            class_id: \"\",\r\n            isValid: {\r\n                value: false,\r\n                text: ''   \r\n            }\r\n        }\r\n    }\r\n\r\n    handleTextChange(event) {\r\n        this.setState({ [event.name]: event.value });\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n       if (this.props && this.props.user && this.props.user.id && this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            await this.setState({ class_id: this.props.match.params.id })\r\n        }\r\n    }\r\n    \r\n\r\n    createNotification = (type, value) => {\r\n        switch (type) {\r\n            case 'info':\r\n                NotificationManager.info(value,'', 5000);\r\n                break;\r\n            case 'success':\r\n                NotificationManager.success(value, '', 5000);\r\n                break;\r\n            case 'warning':\r\n                NotificationManager.warning(value, '', 5000);\r\n                break;\r\n            case 'error':\r\n                NotificationManager.error(value, '', 5000);\r\n                break;\r\n            default: break;\r\n        }\r\n    };\r\n\r\n    \r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n        const { name, description, class_id  } = this.state;\r\n\r\n        if (!name && name.trim().length <= 0) {\r\n            this.setState({ isValid: { value: true, text: 'Please enter valid Topic Name', name: 'name' }});\r\n            return;\r\n        }\r\n\r\n        if (!description && description.trim().length <= 0) {\r\n            this.setState({ isValid: { value: true, text: 'Please enter valid Topic Description', name: 'description' }});\r\n            return;\r\n        }\r\n       \r\n        axios.post(`${configs.prod}/api/topic/create`, { name: name.trim(), description: description.trim(), class_id, type: true, user_id: this.props.user.id })\r\n            .then(response => {\r\n                this.props.history.push(`/faculty/class/list`);\r\n            })\r\n            .catch(err => {\r\n                console.log('Error: ', err.response);\r\n                if (err.response && err.response.status && (err.response.status === 400 || err.response.status === 500)) {\r\n                    if (err.response.status === 500 && err.response.data.error.name === 'SequelizeUniqueConstraintError') {\r\n                        this.setState({ isValid: { value: true, text: 'Topic with this name already exist', name:'server_error' } });\r\n                    } else {\r\n                        this.setState({ isValid: { value: true, text: err.response.data.msg, name:'server_error' } });\r\n                    }\r\n                } else {\r\n                    this.setState({ isValid: { value: true, text: 'Unknown Error', name:'server_error' } });\r\n                    //this.createNotification('error', 'Unknown Error');\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Aux>\r\n                {this.state.isLoading && <Loader />}\r\n\t\t\t\t<Row>\r\n                    <NotificationContainer/>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Add Topic for Discussion</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Form className=\"col-md-12\" onSubmit={(e) => this.handleSubmit(e)}>\r\n                                        <fieldset disabled={this.state.isLoading} className={this.state.isLoading ? 'opacity-5' : ''}>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                                        <Form.Label>Topic Name</Form.Label>\r\n                                                        <Form.Control \r\n                                                            type=\"text\" \r\n                                                            name=\"name\" \r\n                                                            placeholder=\"Topic Name\" \r\n                                                            value={this.state.name}\r\n                                                            className={this.state.isValid.value && this.state.isValid.name === 'name' ? 'in-valid-input' : ''}\r\n                                                            onFocus={() => this.setState({ isValid: { value: false, text: ''}})}\r\n                                                            onChange={(e) => this.handleTextChange(e.target) }\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                                        <Form.Label>Topic Description</Form.Label>\r\n                                                        <Form.Control \r\n                                                            as=\"textarea\" \r\n                                                            name='description'\r\n                                                            rows={4}\r\n                                                            value={this.state.description}\r\n                                                            className={this.state.isValid.value && this.state.isValid.name === 'description' ? 'in-valid-input' : ''}\r\n                                                            onFocus={() => this.setState({ isValid: { value: false, text: ''}})}\r\n                                                            onChange={(e) => this.handleTextChange(e.target) }\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                            <Form.Row>\r\n                                                <Col md={{ span: 8, offset: 2 }}>\r\n                                                    <div>\r\n                                                        <Button type=\"submit\" style={{ marginTop: '1.8rem', width: '100%' }} variant={\"primary\"}>\r\n                                                            { 'Submit' }\r\n                                                        </Button>\r\n                                                        {\r\n                                                            this.state.isValid.value ?\r\n                                                            <Form.Text style={{ color: 'red' }}>\r\n                                                                { this.state.isValid.text }\r\n                                                            </Form.Text> : ''\r\n                                                        }\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Form.Row>\r\n                                        </fieldset>\r\n                                    </Form>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userDetails.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AddTopic);\r\n"],"sourceRoot":""}